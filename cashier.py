# -*- coding: utf-8 -*-
"""cashier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14qhhJsjPEC5mkGHEPYLNQHSaF1y4P7EC
"""

!pip install tabulate

'''
This module are contains some method to execute 
the self-cashier program in module main.py
'''

#import library needed
import pandas as pd
from tabulate import tabulate

class Transaction:

  #initialize class transaction
  def __init__(self):
    self.order = {}

  '''
  This method below used for adding items activities which contains 
  item_name, item_qty, and item_price and calculate the total_price
  '''
  def add_item(self, item_name, item_qty, item_price):
    self.item_name = item_name
    self.item_qty = item_qty
    self.item_price = item_price

    #looping input for adding item
    while True:
      try:
        item_name = str.upper(input('Please type the item name: '))
        item_qty = int(input('Many quantity you want to order: '))
        item_price = int(input('Scan the barcode or type the price: '))

        #make sure the input is correct
        if item_qty <= 0:
          raise ValueError("Input wrong! Quantity can't be and less than zero")
        elif item_price <= 0:
          raise ValueError("Input wrong! Price can't be and less than zero")
        else: 
          raise NameError("Item name not in the list. Check your input once more")
        
        self.order[item_name] = {
            'Qty' : item_qty, 
            'Price' : item_price, 
            'Total': item_qty*item_price
            }
        print('Item successfully added!')

        #add_item again or no
        while True:
          yn = str.upper(input('Do you want to add another item? Type Y/N only: '))
          if yn == 'Y':
            break
          elif yn == 'N':
            print('Okay!')

      except Exception:
        print(Exception)

'''
  This method below used for updating items activities 
  including item name, quantity and price
  '''
  def update_item(self, item_name, item_qty, item_price):
    self.item_name = item_name
    self.item_qty = item_qty
    self.item_price = item_price

    while True:
      update = str.upper(input("For updating item_name type N, for item_qty type Q, and for item_price type P: "))
      
      #update item_name
      if update == 'N':
        try:
          #check the item name first 
          item_name = str.upper(input('Type item name you want to update: '))
          #when item name is exist on the list of self order
          if item_name in self.order:
            update_name = str.upper(input('Type new item name: '))
            self.order[update_name] = self.order.pop(item_name)
            print(f'{item_name} successfully changed to {update_name}')
          else:
            raise NameError
        except NameError:
          print(f'{item_name} not on your list. Check the input once more')
          continue

      #update item_qty
      elif update == 'Q':
        try:
          #check the item name first
          item_name = str.upper(input('Type item name you want to update: '))
          #when item name is exist on the list of self order
          if item_name in self.order:
            new_qty = int(input('New quantity you want to order: '))
            if new_qty > 0:
              print(f'{item_qty} successfully changed to {new_qty}')
            else:
              raise ValueError
          else:
            raise NameError
        except NameError:
          print(f'{item_name} not on your list. Check your input once more')
        except ValueError:
          print(f'Quantity should be more than zero. Please enter quantity correctly!')

      #update item_price
      elif update == 'P':
        try:
          #check the item name first
          item_name = str.upper(input('Type item name you want to update: '))
          #when item name is exist on the list of self order
          if item_name in self.order:
            new_price = int(input('Enter new correct price: '))
            if new_price > 0:
              print(f'{item_price} successfully changed to {new_price}')
            else:
              raise ValueError
          else:
            raise NameError
        except NameError:
          print(f'{item_name} not on your list. Check your input once more')
        except ValueError:
          print(f'Price should be more than zero. Please input price correctly!')
      
      else:
        continue
      
      #update_item again or no
      while True:
        yn = str.upper(input('Do you want to update another item? Type Y/N only: '))
        if yn == 'Y':
          break
        elif yn == 'N':
          print('Okay')
          return
        else:
          continue

'''
  This method below used for deleting item in chart including 
  item name, quantity and price using item's name
  '''
  def delete_item(self, item_name, item_qty, item_price):
    self.item_name = item_name
    self.item_qty = item_qty
    self.item_price = item_price

    while True:
      try:
        #check the item name first
        delete_name = str.upper(input('Type item name you want to delete: '))
        #when item name is exist on self order dict
        if delete_name in self.order:
          self.order.pop(item_name)
          print(str.upper(input(f'Are you sure want to delete {delete_name}? Confirm by type Y/N: ')))
          if yn == 'Y':
            print(f'{delete_name} successfully deleted')
          elif yn == 'N':
            print(f'{delete_name} canceled deleted')
          else:
            print('Type yes or no correctly!')
      
          #update_item again or no
          while True:
            yn = str.upper(input('Do you want to delete another item? Type Y/N only: '))
            if yn == 'Y':
              break
            elif yn == 'N':
              print('Okay')
              return
            else:
              continue
      except ValueError:
        print(f'{item_name} not on your list. Check the input once more')

'''
  This method below used for reset all transaction in self.order dict including
  item name, quantity and price. There's also option to make new transaction
  '''
  def reset_trnsct(self, item_name, item_qty, item_price):
    self.item_name = item_name
    self.item_qty = item_qty
    self.item_price = item_price

    while True:
      try:
        if len(self.order) != 0:
          self.order.clear()
          print(str.upper(input(f'Are you sure want to reset all transaction? Confirm by type Y/N: ')))
          if yn == 'Y':
            print('Your transaction has been canceled')
            yn = str.upper(input('Want to create new transaction? Confirm by type Y/N: '))
            if yn == 'Y':
              add_item
            elif yn == 'N':
              break
            else:
              print('Type yes or no correctly!')
          else:
            print('Enjoy your shopping!')
        else:
          #when there's no item added to dict
          raise ValueError
      except ValueError:
        print('Your cart is empty! Add some items first to start shopping')

'''
  This method below used for display list of transaction in self.order dict 
  including item name, quantity, and total price with table form
  '''
  def check_order(self):
    list_trnsct = []
    #column
    columns = ['ITEM', 'QTY', 'PRICE', 'TOTAL']
    list_trnsct.append(columns)
    
    #rows
    for key, value in self.order.items():
      item_name = key
      item_qty = value[0]
      item_price = value[1]
      total = item_qty*item_price
      rows = [item_name, item_qty. item_price, total]
      list_trnsct.append(rows)
    
    #display list transaction
    print(tabulate(table, headers='firstrow', tablefmt='fancy_grid'))

'''
  This method below used for calculate total price from list of transaction 
  in self.order dict including discount requirements
  '''
  def checkout(self):
    total = 0
    for key, value in self.order.items():
      total += (item_qty*item_price)

    #discount requirements
    discount = 0 
    if 200000 < total <= 300000:
      discount = 0.05
    elif 300000 < total <= 500000:
      discount = 0.00
    elif total > 500000:
      discount = 0.1
    else:
      total_price = total_price